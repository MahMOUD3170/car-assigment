
TIMER_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001874  00001908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007e  0080007e  00001926  2**0
                  ALLOC
  3 .stab         0000114c  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c92  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 0c 	call	0x1838	; 0x1838 <main>
      8a:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_init>:

#include "timer.h"
Std_Func_t TIMER_init (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <TIMER_init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <TIMER_init+0x8>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	Std_Func_t retval = OK;
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 loop_index = 0;
      a2:	19 82       	std	Y+1, r1	; 0x01

	for(loop_index = 0;loop_index<NUM_OF_TIMERS;loop_index++)
      a4:	19 82       	std	Y+1, r1	; 0x01
      a6:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__stack+0x1361>
	{
		TIMER_cnfg_arr[loop_index].IS_init_arr = INITIALIZED;
      aa:	89 81       	ldd	r24, Y+1	; 0x01
      ac:	88 2f       	mov	r24, r24
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	88 0f       	add	r24, r24
      b2:	99 1f       	adc	r25, r25
      b4:	9c 01       	movw	r18, r24
      b6:	22 0f       	add	r18, r18
      b8:	33 1f       	adc	r19, r19
      ba:	22 0f       	add	r18, r18
      bc:	33 1f       	adc	r19, r19
      be:	82 0f       	add	r24, r18
      c0:	93 1f       	adc	r25, r19
      c2:	fc 01       	movw	r30, r24
      c4:	e7 59       	subi	r30, 0x97	; 151
      c6:	ff 4f       	sbci	r31, 0xFF	; 255
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	80 83       	st	Z, r24
		switch(TIMER_cnfg_arr[loop_index].TIMER)
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	88 2f       	mov	r24, r24
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	88 0f       	add	r24, r24
      d4:	99 1f       	adc	r25, r25
      d6:	9c 01       	movw	r18, r24
      d8:	22 0f       	add	r18, r18
      da:	33 1f       	adc	r19, r19
      dc:	22 0f       	add	r18, r18
      de:	33 1f       	adc	r19, r19
      e0:	82 0f       	add	r24, r18
      e2:	93 1f       	adc	r25, r19
      e4:	fc 01       	movw	r30, r24
      e6:	e0 5a       	subi	r30, 0xA0	; 160
      e8:	ff 4f       	sbci	r31, 0xFF	; 255
      ea:	80 81       	ld	r24, Z
      ec:	28 2f       	mov	r18, r24
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	3c 83       	std	Y+4, r19	; 0x04
      f2:	2b 83       	std	Y+3, r18	; 0x03
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	9c 81       	ldd	r25, Y+4	; 0x04
      f8:	00 97       	sbiw	r24, 0x00	; 0
      fa:	41 f0       	breq	.+16     	; 0x10c <TIMER_init+0x7a>
      fc:	2b 81       	ldd	r18, Y+3	; 0x03
      fe:	3c 81       	ldd	r19, Y+4	; 0x04
     100:	22 30       	cpi	r18, 0x02	; 2
     102:	31 05       	cpc	r19, r1
     104:	09 f4       	brne	.+2      	; 0x108 <TIMER_init+0x76>
     106:	ed c6       	rjmp	.+3546   	; 0xee2 <__stack+0xa83>
     108:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__stack+0x135b>
		{

		case timer_0:
			if(TIMER_cnfg_arr[loop_index].MODE == NORMAL &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	88 2f       	mov	r24, r24
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	9c 01       	movw	r18, r24
     118:	22 0f       	add	r18, r18
     11a:	33 1f       	adc	r19, r19
     11c:	22 0f       	add	r18, r18
     11e:	33 1f       	adc	r19, r19
     120:	82 0f       	add	r24, r18
     122:	93 1f       	adc	r25, r19
     124:	fc 01       	movw	r30, r24
     126:	ef 59       	subi	r30, 0x9F	; 159
     128:	ff 4f       	sbci	r31, 0xFF	; 255
     12a:	80 81       	ld	r24, Z
     12c:	88 23       	and	r24, r24
     12e:	09 f0       	breq	.+2      	; 0x132 <TIMER_init+0xa0>
     130:	84 c1       	rjmp	.+776    	; 0x43a <TIMER_init+0x3a8>
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	88 2f       	mov	r24, r24
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	88 0f       	add	r24, r24
     13a:	99 1f       	adc	r25, r25
     13c:	9c 01       	movw	r18, r24
     13e:	22 0f       	add	r18, r18
     140:	33 1f       	adc	r19, r19
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	82 0f       	add	r24, r18
     148:	93 1f       	adc	r25, r19
     14a:	fc 01       	movw	r30, r24
     14c:	ef 59       	subi	r30, 0x9F	; 159
     14e:	ff 4f       	sbci	r31, 0xFF	; 255
     150:	80 81       	ld	r24, Z
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	08 f0       	brcs	.+2      	; 0x158 <TIMER_init+0xc6>
     156:	71 c1       	rjmp	.+738    	; 0x43a <TIMER_init+0x3a8>
			{
				TCCR0 = (1<<FOC0) ;
     158:	e3 e5       	ldi	r30, 0x53	; 83
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 e8       	ldi	r24, 0x80	; 128
     15e:	80 83       	st	Z, r24
				TCNT0 = 0;
     160:	e2 e5       	ldi	r30, 0x52	; 82
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	10 82       	st	Z, r1
				TCCR0=(TCCR0&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
     166:	a3 e5       	ldi	r26, 0x53	; 83
     168:	b0 e0       	ldi	r27, 0x00	; 0
     16a:	e3 e5       	ldi	r30, 0x53	; 83
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	80 81       	ld	r24, Z
     170:	48 2f       	mov	r20, r24
     172:	4f 7c       	andi	r20, 0xCF	; 207
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	88 2f       	mov	r24, r24
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	9c 01       	movw	r18, r24
     180:	22 0f       	add	r18, r18
     182:	33 1f       	adc	r19, r19
     184:	22 0f       	add	r18, r18
     186:	33 1f       	adc	r19, r19
     188:	82 0f       	add	r24, r18
     18a:	93 1f       	adc	r25, r19
     18c:	fc 01       	movw	r30, r24
     18e:	ed 59       	subi	r30, 0x9D	; 157
     190:	ff 4f       	sbci	r31, 0xFF	; 255
     192:	80 81       	ld	r24, Z
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	82 95       	swap	r24
     19a:	92 95       	swap	r25
     19c:	90 7f       	andi	r25, 0xF0	; 240
     19e:	98 27       	eor	r25, r24
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	98 27       	eor	r25, r24
     1a4:	84 2b       	or	r24, r20
     1a6:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	88 2f       	mov	r24, r24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	88 0f       	add	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	9c 01       	movw	r18, r24
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	82 0f       	add	r24, r18
     1be:	93 1f       	adc	r25, r19
     1c0:	fc 01       	movw	r30, r24
     1c2:	eb 59       	subi	r30, 0x9B	; 155
     1c4:	ff 4f       	sbci	r31, 0xFF	; 255
     1c6:	80 81       	ld	r24, Z
     1c8:	88 23       	and	r24, r24
     1ca:	09 f0       	breq	.+2      	; 0x1ce <TIMER_init+0x13c>
     1cc:	3e c0       	rjmp	.+124    	; 0x24a <TIMER_init+0x1b8>
				{
					if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	88 2f       	mov	r24, r24
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	9c 01       	movw	r18, r24
     1da:	22 0f       	add	r18, r18
     1dc:	33 1f       	adc	r19, r19
     1de:	22 0f       	add	r18, r18
     1e0:	33 1f       	adc	r19, r19
     1e2:	82 0f       	add	r24, r18
     1e4:	93 1f       	adc	r25, r19
     1e6:	fc 01       	movw	r30, r24
     1e8:	e9 59       	subi	r30, 0x99	; 153
     1ea:	ff 4f       	sbci	r31, 0xFF	; 255
     1ec:	80 81       	ld	r24, Z
     1ee:	86 30       	cpi	r24, 0x06	; 6
     1f0:	d0 f4       	brcc	.+52     	; 0x226 <TIMER_init+0x194>
					{

						TCCR0 =	(TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     1f2:	a3 e5       	ldi	r26, 0x53	; 83
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	e3 e5       	ldi	r30, 0x53	; 83
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	48 2f       	mov	r20, r24
     1fe:	48 7f       	andi	r20, 0xF8	; 248
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	88 2f       	mov	r24, r24
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	9c 01       	movw	r18, r24
     20c:	22 0f       	add	r18, r18
     20e:	33 1f       	adc	r19, r19
     210:	22 0f       	add	r18, r18
     212:	33 1f       	adc	r19, r19
     214:	82 0f       	add	r24, r18
     216:	93 1f       	adc	r25, r19
     218:	fc 01       	movw	r30, r24
     21a:	e9 59       	subi	r30, 0x99	; 153
     21c:	ff 4f       	sbci	r31, 0xFF	; 255
     21e:	80 81       	ld	r24, Z
     220:	84 2b       	or	r24, r20
     222:	8c 93       	st	X, r24
     224:	c1 c0       	rjmp	.+386    	; 0x3a8 <TIMER_init+0x316>
					}
					else
					{
						TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	9c 01       	movw	r18, r24
     232:	22 0f       	add	r18, r18
     234:	33 1f       	adc	r19, r19
     236:	22 0f       	add	r18, r18
     238:	33 1f       	adc	r19, r19
     23a:	82 0f       	add	r24, r18
     23c:	93 1f       	adc	r25, r19
     23e:	fc 01       	movw	r30, r24
     240:	e7 59       	subi	r30, 0x97	; 151
     242:	ff 4f       	sbci	r31, 0xFF	; 255
     244:	10 82       	st	Z, r1
						retval = NOK;
     246:	1a 82       	std	Y+2, r1	; 0x02
     248:	af c0       	rjmp	.+350    	; 0x3a8 <TIMER_init+0x316>
					}
				}

				else if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == external)
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	9c 01       	movw	r18, r24
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	fc 01       	movw	r30, r24
     264:	eb 59       	subi	r30, 0x9B	; 155
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	80 81       	ld	r24, Z
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	09 f0       	breq	.+2      	; 0x270 <TIMER_init+0x1de>
     26e:	8b c0       	rjmp	.+278    	; 0x386 <TIMER_init+0x2f4>
				{ DDRB &= ~(1<<PB1);
     270:	a7 e3       	ldi	r26, 0x37	; 55
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e7 e3       	ldi	r30, 0x37	; 55
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8d 7f       	andi	r24, 0xFD	; 253
     27c:	8c 93       	st	X, r24
				if(TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_falling)
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	9c 01       	movw	r18, r24
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	22 0f       	add	r18, r18
     290:	33 1f       	adc	r19, r19
     292:	82 0f       	add	r24, r18
     294:	93 1f       	adc	r25, r19
     296:	fc 01       	movw	r30, r24
     298:	ea 59       	subi	r30, 0x9A	; 154
     29a:	ff 4f       	sbci	r31, 0xFF	; 255
     29c:	80 81       	ld	r24, Z
     29e:	86 30       	cpi	r24, 0x06	; 6
     2a0:	49 f4       	brne	.+18     	; 0x2b4 <TIMER_init+0x222>
				{
					TCCR0 = (TCCR0 & 0xF8) | EX_falling;
     2a2:	a3 e5       	ldi	r26, 0x53	; 83
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e3 e5       	ldi	r30, 0x53	; 83
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	88 7f       	andi	r24, 0xF8	; 248
     2ae:	86 60       	ori	r24, 0x06	; 6
     2b0:	8c 93       	st	X, r24
     2b2:	2b c0       	rjmp	.+86     	; 0x30a <TIMER_init+0x278>
				}

				else if (TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_rising)
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	9c 01       	movw	r18, r24
     2c0:	22 0f       	add	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	22 0f       	add	r18, r18
     2c6:	33 1f       	adc	r19, r19
     2c8:	82 0f       	add	r24, r18
     2ca:	93 1f       	adc	r25, r19
     2cc:	fc 01       	movw	r30, r24
     2ce:	ea 59       	subi	r30, 0x9A	; 154
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	80 81       	ld	r24, Z
     2d4:	87 30       	cpi	r24, 0x07	; 7
     2d6:	41 f4       	brne	.+16     	; 0x2e8 <TIMER_init+0x256>
				{
					TCCR0 = (TCCR0 & 0xF8) | EX_rising;
     2d8:	a3 e5       	ldi	r26, 0x53	; 83
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	e3 e5       	ldi	r30, 0x53	; 83
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	87 60       	ori	r24, 0x07	; 7
     2e4:	8c 93       	st	X, r24
     2e6:	11 c0       	rjmp	.+34     	; 0x30a <TIMER_init+0x278>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	9c 01       	movw	r18, r24
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	22 0f       	add	r18, r18
     2fa:	33 1f       	adc	r19, r19
     2fc:	82 0f       	add	r24, r18
     2fe:	93 1f       	adc	r25, r19
     300:	fc 01       	movw	r30, r24
     302:	e7 59       	subi	r30, 0x97	; 151
     304:	ff 4f       	sbci	r31, 0xFF	; 255
     306:	10 82       	st	Z, r1
					retval = NOK;
     308:	1a 82       	std	Y+2, r1	; 0x02
				}
				if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	88 2f       	mov	r24, r24
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	9c 01       	movw	r18, r24
     316:	22 0f       	add	r18, r18
     318:	33 1f       	adc	r19, r19
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	82 0f       	add	r24, r18
     320:	93 1f       	adc	r25, r19
     322:	fc 01       	movw	r30, r24
     324:	e9 59       	subi	r30, 0x99	; 153
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	80 81       	ld	r24, Z
     32a:	86 30       	cpi	r24, 0x06	; 6
     32c:	d0 f4       	brcc	.+52     	; 0x362 <TIMER_init+0x2d0>
				{
					TCCR0 = (TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     32e:	a3 e5       	ldi	r26, 0x53	; 83
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e3 e5       	ldi	r30, 0x53	; 83
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	48 2f       	mov	r20, r24
     33a:	48 7f       	andi	r20, 0xF8	; 248
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	88 2f       	mov	r24, r24
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	9c 01       	movw	r18, r24
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
     350:	82 0f       	add	r24, r18
     352:	93 1f       	adc	r25, r19
     354:	fc 01       	movw	r30, r24
     356:	e9 59       	subi	r30, 0x99	; 153
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	80 81       	ld	r24, Z
     35c:	84 2b       	or	r24, r20
     35e:	8c 93       	st	X, r24
     360:	23 c0       	rjmp	.+70     	; 0x3a8 <TIMER_init+0x316>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	9c 01       	movw	r18, r24
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
     37a:	fc 01       	movw	r30, r24
     37c:	e7 59       	subi	r30, 0x97	; 151
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	10 82       	st	Z, r1
					retval = NOK;
     382:	1a 82       	std	Y+2, r1	; 0x02
     384:	11 c0       	rjmp	.+34     	; 0x3a8 <TIMER_init+0x316>
				}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	9c 01       	movw	r18, r24
     392:	22 0f       	add	r18, r18
     394:	33 1f       	adc	r19, r19
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	82 0f       	add	r24, r18
     39c:	93 1f       	adc	r25, r19
     39e:	fc 01       	movw	r30, r24
     3a0:	e7 59       	subi	r30, 0x97	; 151
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	10 82       	st	Z, r1
					retval = NOK;
     3a6:	1a 82       	std	Y+2, r1	; 0x02
				}
				if(TIMER_cnfg_arr[loop_index].INTERUPT == int_active)
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	88 2f       	mov	r24, r24
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	9c 01       	movw	r18, r24
     3b4:	22 0f       	add	r18, r18
     3b6:	33 1f       	adc	r19, r19
     3b8:	22 0f       	add	r18, r18
     3ba:	33 1f       	adc	r19, r19
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
     3c0:	fc 01       	movw	r30, r24
     3c2:	e8 59       	subi	r30, 0x98	; 152
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	80 81       	ld	r24, Z
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	49 f4       	brne	.+18     	; 0x3de <TIMER_init+0x34c>
				{
					TIMSK |= (1<<TOIE0);
     3cc:	a9 e5       	ldi	r26, 0x59	; 89
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	e9 e5       	ldi	r30, 0x59	; 89
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	8c 93       	st	X, r24
     3da:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__stack+0x135b>
				}
				else if(TIMER_cnfg_arr[loop_index].INTERUPT == int_not_active)
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	88 2f       	mov	r24, r24
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	9c 01       	movw	r18, r24
     3ea:	22 0f       	add	r18, r18
     3ec:	33 1f       	adc	r19, r19
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	fc 01       	movw	r30, r24
     3f8:	e8 59       	subi	r30, 0x98	; 152
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	80 81       	ld	r24, Z
     3fe:	88 23       	and	r24, r24
     400:	49 f4       	brne	.+18     	; 0x414 <TIMER_init+0x382>
				{
					TIMSK &=~ (1<<TOIE1);
     402:	a9 e5       	ldi	r26, 0x59	; 89
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e9 e5       	ldi	r30, 0x59	; 89
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	8b 7f       	andi	r24, 0xFB	; 251
     40e:	8c 93       	st	X, r24
     410:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__stack+0x135b>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	9c 01       	movw	r18, r24
     420:	22 0f       	add	r18, r18
     422:	33 1f       	adc	r19, r19
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	82 0f       	add	r24, r18
     42a:	93 1f       	adc	r25, r19
     42c:	fc 01       	movw	r30, r24
     42e:	e7 59       	subi	r30, 0x97	; 151
     430:	ff 4f       	sbci	r31, 0xFF	; 255
     432:	10 82       	st	Z, r1
					retval = NOK;
     434:	1a 82       	std	Y+2, r1	; 0x02
     436:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__stack+0x135b>
				}
			}
			else if(TIMER_cnfg_arr[loop_index].MODE == CTC &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	9c 01       	movw	r18, r24
     446:	22 0f       	add	r18, r18
     448:	33 1f       	adc	r19, r19
     44a:	22 0f       	add	r18, r18
     44c:	33 1f       	adc	r19, r19
     44e:	82 0f       	add	r24, r18
     450:	93 1f       	adc	r25, r19
     452:	fc 01       	movw	r30, r24
     454:	ef 59       	subi	r30, 0x9F	; 159
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	80 81       	ld	r24, Z
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	09 f0       	breq	.+2      	; 0x460 <__stack+0x1>
     45e:	bb c1       	rjmp	.+886    	; 0x7d6 <__stack+0x377>
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	88 2f       	mov	r24, r24
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	9c 01       	movw	r18, r24
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	fc 01       	movw	r30, r24
     47a:	ef 59       	subi	r30, 0x9F	; 159
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	80 81       	ld	r24, Z
     480:	84 30       	cpi	r24, 0x04	; 4
     482:	08 f0       	brcs	.+2      	; 0x486 <__stack+0x27>
     484:	a8 c1       	rjmp	.+848    	; 0x7d6 <__stack+0x377>
			{TCNT0 = 0;
     486:	e2 e5       	ldi	r30, 0x52	; 82
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	10 82       	st	Z, r1
			TCCR0 = (1<<FOC0) | (1<<WGM01);
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	88 e8       	ldi	r24, 0x88	; 136
     492:	80 83       	st	Z, r24
			if (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <MAX_COMPARE)
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	9c 01       	movw	r18, r24
     4a0:	22 0f       	add	r18, r18
     4a2:	33 1f       	adc	r19, r19
     4a4:	22 0f       	add	r18, r18
     4a6:	33 1f       	adc	r19, r19
     4a8:	82 0f       	add	r24, r18
     4aa:	93 1f       	adc	r25, r19
     4ac:	fc 01       	movw	r30, r24
     4ae:	ed 59       	subi	r30, 0x9D	; 157
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	84 30       	cpi	r24, 0x04	; 4
     4b6:	a8 f5       	brcc	.+106    	; 0x522 <__stack+0xc3>
			{
				TCCR0=(TCCR0&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
     4b8:	a3 e5       	ldi	r26, 0x53	; 83
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e3 e5       	ldi	r30, 0x53	; 83
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	48 2f       	mov	r20, r24
     4c4:	4f 7c       	andi	r20, 0xCF	; 207
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	88 2f       	mov	r24, r24
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	9c 01       	movw	r18, r24
     4d2:	22 0f       	add	r18, r18
     4d4:	33 1f       	adc	r19, r19
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	82 0f       	add	r24, r18
     4dc:	93 1f       	adc	r25, r19
     4de:	fc 01       	movw	r30, r24
     4e0:	ed 59       	subi	r30, 0x9D	; 157
     4e2:	ff 4f       	sbci	r31, 0xFF	; 255
     4e4:	80 81       	ld	r24, Z
     4e6:	88 2f       	mov	r24, r24
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	82 95       	swap	r24
     4ec:	92 95       	swap	r25
     4ee:	90 7f       	andi	r25, 0xF0	; 240
     4f0:	98 27       	eor	r25, r24
     4f2:	80 7f       	andi	r24, 0xF0	; 240
     4f4:	98 27       	eor	r25, r24
     4f6:	84 2b       	or	r24, r20
     4f8:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].O_C_R1 < T_MAX )
				{
					OCR0=TIMER_cnfg_arr[loop_index].O_C_R1;
     4fa:	ac e5       	ldi	r26, 0x5C	; 92
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	9c 01       	movw	r18, r24
     50a:	22 0f       	add	r18, r18
     50c:	33 1f       	adc	r19, r19
     50e:	22 0f       	add	r18, r18
     510:	33 1f       	adc	r19, r19
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	fc 01       	movw	r30, r24
     518:	ec 59       	subi	r30, 0x9C	; 156
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	80 81       	ld	r24, Z
     51e:	8c 93       	st	X, r24
     520:	11 c0       	rjmp	.+34     	; 0x544 <__stack+0xe5>
					retval = NOK;
				}
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	9c 01       	movw	r18, r24
     52e:	22 0f       	add	r18, r18
     530:	33 1f       	adc	r19, r19
     532:	22 0f       	add	r18, r18
     534:	33 1f       	adc	r19, r19
     536:	82 0f       	add	r24, r18
     538:	93 1f       	adc	r25, r19
     53a:	fc 01       	movw	r30, r24
     53c:	e7 59       	subi	r30, 0x97	; 151
     53e:	ff 4f       	sbci	r31, 0xFF	; 255
     540:	10 82       	st	Z, r1
				retval = NOK;
     542:	1a 82       	std	Y+2, r1	; 0x02
			}
			if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	88 2f       	mov	r24, r24
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	9c 01       	movw	r18, r24
     550:	22 0f       	add	r18, r18
     552:	33 1f       	adc	r19, r19
     554:	22 0f       	add	r18, r18
     556:	33 1f       	adc	r19, r19
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	fc 01       	movw	r30, r24
     55e:	eb 59       	subi	r30, 0x9B	; 155
     560:	ff 4f       	sbci	r31, 0xFF	; 255
     562:	80 81       	ld	r24, Z
     564:	88 23       	and	r24, r24
     566:	09 f0       	breq	.+2      	; 0x56a <__stack+0x10b>
     568:	3e c0       	rjmp	.+124    	; 0x5e6 <__stack+0x187>
			{
				if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	9c 01       	movw	r18, r24
     576:	22 0f       	add	r18, r18
     578:	33 1f       	adc	r19, r19
     57a:	22 0f       	add	r18, r18
     57c:	33 1f       	adc	r19, r19
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
     582:	fc 01       	movw	r30, r24
     584:	e9 59       	subi	r30, 0x99	; 153
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	80 81       	ld	r24, Z
     58a:	86 30       	cpi	r24, 0x06	; 6
     58c:	d0 f4       	brcc	.+52     	; 0x5c2 <__stack+0x163>
				{

					TCCR0 =	(TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     58e:	a3 e5       	ldi	r26, 0x53	; 83
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	e3 e5       	ldi	r30, 0x53	; 83
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	48 2f       	mov	r20, r24
     59a:	48 7f       	andi	r20, 0xF8	; 248
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	88 2f       	mov	r24, r24
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	9c 01       	movw	r18, r24
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	22 0f       	add	r18, r18
     5ae:	33 1f       	adc	r19, r19
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	fc 01       	movw	r30, r24
     5b6:	e9 59       	subi	r30, 0x99	; 153
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	80 81       	ld	r24, Z
     5bc:	84 2b       	or	r24, r20
     5be:	8c 93       	st	X, r24
     5c0:	c1 c0       	rjmp	.+386    	; 0x744 <__stack+0x2e5>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	9c 01       	movw	r18, r24
     5ce:	22 0f       	add	r18, r18
     5d0:	33 1f       	adc	r19, r19
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	82 0f       	add	r24, r18
     5d8:	93 1f       	adc	r25, r19
     5da:	fc 01       	movw	r30, r24
     5dc:	e7 59       	subi	r30, 0x97	; 151
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	10 82       	st	Z, r1
					retval = NOK;
     5e2:	1a 82       	std	Y+2, r1	; 0x02
     5e4:	af c0       	rjmp	.+350    	; 0x744 <__stack+0x2e5>
				}
			}

			else if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == external)
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	9c 01       	movw	r18, r24
     5f2:	22 0f       	add	r18, r18
     5f4:	33 1f       	adc	r19, r19
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	fc 01       	movw	r30, r24
     600:	eb 59       	subi	r30, 0x9B	; 155
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	80 81       	ld	r24, Z
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	09 f0       	breq	.+2      	; 0x60c <__stack+0x1ad>
     60a:	8b c0       	rjmp	.+278    	; 0x722 <__stack+0x2c3>
			{ DDRB &= ~(1<<PB1);
     60c:	a7 e3       	ldi	r26, 0x37	; 55
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	e7 e3       	ldi	r30, 0x37	; 55
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	8d 7f       	andi	r24, 0xFD	; 253
     618:	8c 93       	st	X, r24
			if(TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_falling)
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	88 2f       	mov	r24, r24
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	9c 01       	movw	r18, r24
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	22 0f       	add	r18, r18
     62c:	33 1f       	adc	r19, r19
     62e:	82 0f       	add	r24, r18
     630:	93 1f       	adc	r25, r19
     632:	fc 01       	movw	r30, r24
     634:	ea 59       	subi	r30, 0x9A	; 154
     636:	ff 4f       	sbci	r31, 0xFF	; 255
     638:	80 81       	ld	r24, Z
     63a:	86 30       	cpi	r24, 0x06	; 6
     63c:	49 f4       	brne	.+18     	; 0x650 <__stack+0x1f1>
			{
				TCCR0 = (TCCR0 & 0xF8) | EX_falling;
     63e:	a3 e5       	ldi	r26, 0x53	; 83
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e3 e5       	ldi	r30, 0x53	; 83
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	88 7f       	andi	r24, 0xF8	; 248
     64a:	86 60       	ori	r24, 0x06	; 6
     64c:	8c 93       	st	X, r24
     64e:	2b c0       	rjmp	.+86     	; 0x6a6 <__stack+0x247>
			}

			else if (TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_rising)
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	9c 01       	movw	r18, r24
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	fc 01       	movw	r30, r24
     66a:	ea 59       	subi	r30, 0x9A	; 154
     66c:	ff 4f       	sbci	r31, 0xFF	; 255
     66e:	80 81       	ld	r24, Z
     670:	87 30       	cpi	r24, 0x07	; 7
     672:	41 f4       	brne	.+16     	; 0x684 <__stack+0x225>
			{
				TCCR0 = (TCCR0 & 0xF8) | EX_rising;
     674:	a3 e5       	ldi	r26, 0x53	; 83
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	e3 e5       	ldi	r30, 0x53	; 83
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	87 60       	ori	r24, 0x07	; 7
     680:	8c 93       	st	X, r24
     682:	11 c0       	rjmp	.+34     	; 0x6a6 <__stack+0x247>
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	88 2f       	mov	r24, r24
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	9c 01       	movw	r18, r24
     690:	22 0f       	add	r18, r18
     692:	33 1f       	adc	r19, r19
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	82 0f       	add	r24, r18
     69a:	93 1f       	adc	r25, r19
     69c:	fc 01       	movw	r30, r24
     69e:	e7 59       	subi	r30, 0x97	; 151
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
     6a2:	10 82       	st	Z, r1
				retval = NOK;
     6a4:	1a 82       	std	Y+2, r1	; 0x02
			}
			if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	9c 01       	movw	r18, r24
     6b2:	22 0f       	add	r18, r18
     6b4:	33 1f       	adc	r19, r19
     6b6:	22 0f       	add	r18, r18
     6b8:	33 1f       	adc	r19, r19
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	fc 01       	movw	r30, r24
     6c0:	e9 59       	subi	r30, 0x99	; 153
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	80 81       	ld	r24, Z
     6c6:	86 30       	cpi	r24, 0x06	; 6
     6c8:	d0 f4       	brcc	.+52     	; 0x6fe <__stack+0x29f>
			{
				TCCR0 = (TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     6ca:	a3 e5       	ldi	r26, 0x53	; 83
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e3 e5       	ldi	r30, 0x53	; 83
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	48 2f       	mov	r20, r24
     6d6:	48 7f       	andi	r20, 0xF8	; 248
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	9c 01       	movw	r18, r24
     6e4:	22 0f       	add	r18, r18
     6e6:	33 1f       	adc	r19, r19
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	82 0f       	add	r24, r18
     6ee:	93 1f       	adc	r25, r19
     6f0:	fc 01       	movw	r30, r24
     6f2:	e9 59       	subi	r30, 0x99	; 153
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	80 81       	ld	r24, Z
     6f8:	84 2b       	or	r24, r20
     6fa:	8c 93       	st	X, r24
     6fc:	23 c0       	rjmp	.+70     	; 0x744 <__stack+0x2e5>
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	9c 01       	movw	r18, r24
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	22 0f       	add	r18, r18
     710:	33 1f       	adc	r19, r19
     712:	82 0f       	add	r24, r18
     714:	93 1f       	adc	r25, r19
     716:	fc 01       	movw	r30, r24
     718:	e7 59       	subi	r30, 0x97	; 151
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	10 82       	st	Z, r1
				retval = NOK;
     71e:	1a 82       	std	Y+2, r1	; 0x02
     720:	11 c0       	rjmp	.+34     	; 0x744 <__stack+0x2e5>
			}
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	88 2f       	mov	r24, r24
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	9c 01       	movw	r18, r24
     72e:	22 0f       	add	r18, r18
     730:	33 1f       	adc	r19, r19
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	82 0f       	add	r24, r18
     738:	93 1f       	adc	r25, r19
     73a:	fc 01       	movw	r30, r24
     73c:	e7 59       	subi	r30, 0x97	; 151
     73e:	ff 4f       	sbci	r31, 0xFF	; 255
     740:	10 82       	st	Z, r1
				retval = NOK;
     742:	1a 82       	std	Y+2, r1	; 0x02
			}
			if(TIMER_cnfg_arr[loop_index].INTERUPT == int_active)
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	88 2f       	mov	r24, r24
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	9c 01       	movw	r18, r24
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	22 0f       	add	r18, r18
     756:	33 1f       	adc	r19, r19
     758:	82 0f       	add	r24, r18
     75a:	93 1f       	adc	r25, r19
     75c:	fc 01       	movw	r30, r24
     75e:	e8 59       	subi	r30, 0x98	; 152
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	80 81       	ld	r24, Z
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	49 f4       	brne	.+18     	; 0x77a <__stack+0x31b>
			{
				TIMSK |= (1<<OCIE0);
     768:	a9 e5       	ldi	r26, 0x59	; 89
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	e9 e5       	ldi	r30, 0x59	; 89
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	82 60       	ori	r24, 0x02	; 2
     774:	8c 93       	st	X, r24
     776:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__stack+0x135b>
			}
			else if(TIMER_cnfg_arr[loop_index].INTERUPT == int_not_active)
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	9c 01       	movw	r18, r24
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	22 0f       	add	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	82 0f       	add	r24, r18
     790:	93 1f       	adc	r25, r19
     792:	fc 01       	movw	r30, r24
     794:	e8 59       	subi	r30, 0x98	; 152
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	80 81       	ld	r24, Z
     79a:	88 23       	and	r24, r24
     79c:	49 f4       	brne	.+18     	; 0x7b0 <__stack+0x351>
			{
				TIMSK &=~ (1<<OCIE0);
     79e:	a9 e5       	ldi	r26, 0x59	; 89
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e9 e5       	ldi	r30, 0x59	; 89
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	8d 7f       	andi	r24, 0xFD	; 253
     7aa:	8c 93       	st	X, r24
     7ac:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__stack+0x135b>
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	9c 01       	movw	r18, r24
     7bc:	22 0f       	add	r18, r18
     7be:	33 1f       	adc	r19, r19
     7c0:	22 0f       	add	r18, r18
     7c2:	33 1f       	adc	r19, r19
     7c4:	82 0f       	add	r24, r18
     7c6:	93 1f       	adc	r25, r19
     7c8:	fc 01       	movw	r30, r24
     7ca:	e7 59       	subi	r30, 0x97	; 151
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	10 82       	st	Z, r1
				retval = NOK;
     7d0:	1a 82       	std	Y+2, r1	; 0x02
     7d2:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__stack+0x135b>
			}

			}
			else if(TIMER_cnfg_arr[loop_index].MODE == FAST_PWM &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	9c 01       	movw	r18, r24
     7e2:	22 0f       	add	r18, r18
     7e4:	33 1f       	adc	r19, r19
     7e6:	22 0f       	add	r18, r18
     7e8:	33 1f       	adc	r19, r19
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	fc 01       	movw	r30, r24
     7f0:	ef 59       	subi	r30, 0x9F	; 159
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	80 81       	ld	r24, Z
     7f6:	83 30       	cpi	r24, 0x03	; 3
     7f8:	09 f0       	breq	.+2      	; 0x7fc <__stack+0x39d>
     7fa:	a7 c1       	rjmp	.+846    	; 0xb4a <__stack+0x6eb>
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	88 2f       	mov	r24, r24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	9c 01       	movw	r18, r24
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	82 0f       	add	r24, r18
     812:	93 1f       	adc	r25, r19
     814:	fc 01       	movw	r30, r24
     816:	ef 59       	subi	r30, 0x9F	; 159
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	80 81       	ld	r24, Z
     81c:	84 30       	cpi	r24, 0x04	; 4
     81e:	08 f0       	brcs	.+2      	; 0x822 <__stack+0x3c3>
     820:	94 c1       	rjmp	.+808    	; 0xb4a <__stack+0x6eb>
			{
				TCCR0 =(1<<WGM00) | (1<<WGM01);
     822:	e3 e5       	ldi	r30, 0x53	; 83
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	88 e4       	ldi	r24, 0x48	; 72
     828:	80 83       	st	Z, r24
				TCCR0 &=~(1<<FOC0);/*FOCO BINS WILL BE ZERO */
     82a:	a3 e5       	ldi	r26, 0x53	; 83
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	e3 e5       	ldi	r30, 0x53	; 83
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8f 77       	andi	r24, 0x7F	; 127
     836:	8c 93       	st	X, r24
				TCNT0 = 0;
     838:	e2 e5       	ldi	r30, 0x52	; 82
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	10 82       	st	Z, r1
				/*SET THE MODE*/


				/*Set OUTPUT PIN for timer1 */
				if (TIMER_cnfg_arr[loop_index].OUTPUT_PINS==one_pin)
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	28 2f       	mov	r18, r24
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	c9 01       	movw	r24, r18
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	82 0f       	add	r24, r18
     850:	93 1f       	adc	r25, r19
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	fc 01       	movw	r30, r24
     85a:	e0 5a       	subi	r30, 0xA0	; 160
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	80 81       	ld	r24, Z
     860:	88 23       	and	r24, r24
     862:	09 f0       	breq	.+2      	; 0x866 <__stack+0x407>
     864:	60 c0       	rjmp	.+192    	; 0x926 <__stack+0x4c7>
				{ DDRB  = DDRB | (1<<PB3);//set OC0 as output pin --> pin where the PWM signal is generated from MC
     866:	a7 e3       	ldi	r26, 0x37	; 55
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e7 e3       	ldi	r30, 0x37	; 55
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	88 60       	ori	r24, 0x08	; 8
     872:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <MAX_COMPARE)
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	9c 01       	movw	r18, r24
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	82 0f       	add	r24, r18
     88a:	93 1f       	adc	r25, r19
     88c:	fc 01       	movw	r30, r24
     88e:	ed 59       	subi	r30, 0x9D	; 157
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	80 81       	ld	r24, Z
     894:	84 30       	cpi	r24, 0x04	; 4
     896:	a8 f5       	brcc	.+106    	; 0x902 <__stack+0x4a3>
				{
					TCCR0=(TCCR0&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
     898:	a3 e5       	ldi	r26, 0x53	; 83
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	e3 e5       	ldi	r30, 0x53	; 83
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	48 2f       	mov	r20, r24
     8a4:	4f 7c       	andi	r20, 0xCF	; 207
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	9c 01       	movw	r18, r24
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	82 0f       	add	r24, r18
     8bc:	93 1f       	adc	r25, r19
     8be:	fc 01       	movw	r30, r24
     8c0:	ed 59       	subi	r30, 0x9D	; 157
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	80 81       	ld	r24, Z
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	82 95       	swap	r24
     8cc:	92 95       	swap	r25
     8ce:	90 7f       	andi	r25, 0xF0	; 240
     8d0:	98 27       	eor	r25, r24
     8d2:	80 7f       	andi	r24, 0xF0	; 240
     8d4:	98 27       	eor	r25, r24
     8d6:	84 2b       	or	r24, r20
     8d8:	8c 93       	st	X, r24
					if (TIMER_cnfg_arr[loop_index].O_C_R1 <=T_MAX )
					{ /*  Set the compare value IN  OCR0*/
						OCR0=TIMER_cnfg_arr[loop_index].O_C_R1; /*COMPARE VALUE IN OCR0*/
     8da:	ac e5       	ldi	r26, 0x5C	; 92
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	88 2f       	mov	r24, r24
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	9c 01       	movw	r18, r24
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	82 0f       	add	r24, r18
     8f4:	93 1f       	adc	r25, r19
     8f6:	fc 01       	movw	r30, r24
     8f8:	ec 59       	subi	r30, 0x9C	; 156
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	80 81       	ld	r24, Z
     8fe:	8c 93       	st	X, r24
     900:	23 c0       	rjmp	.+70     	; 0x948 <__stack+0x4e9>
						retval = NOK;
					}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	88 2f       	mov	r24, r24
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	9c 01       	movw	r18, r24
     90e:	22 0f       	add	r18, r18
     910:	33 1f       	adc	r19, r19
     912:	22 0f       	add	r18, r18
     914:	33 1f       	adc	r19, r19
     916:	82 0f       	add	r24, r18
     918:	93 1f       	adc	r25, r19
     91a:	fc 01       	movw	r30, r24
     91c:	e7 59       	subi	r30, 0x97	; 151
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	10 82       	st	Z, r1
					retval = NOK;
     922:	1a 82       	std	Y+2, r1	; 0x02
     924:	11 c0       	rjmp	.+34     	; 0x948 <__stack+0x4e9>
				}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	9c 01       	movw	r18, r24
     932:	22 0f       	add	r18, r18
     934:	33 1f       	adc	r19, r19
     936:	22 0f       	add	r18, r18
     938:	33 1f       	adc	r19, r19
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
     93e:	fc 01       	movw	r30, r24
     940:	e7 59       	subi	r30, 0x97	; 151
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	10 82       	st	Z, r1
					retval = NOK;
     946:	1a 82       	std	Y+2, r1	; 0x02
				}

				if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	9c 01       	movw	r18, r24
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	82 0f       	add	r24, r18
     95e:	93 1f       	adc	r25, r19
     960:	fc 01       	movw	r30, r24
     962:	eb 59       	subi	r30, 0x9B	; 155
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	80 81       	ld	r24, Z
     968:	88 23       	and	r24, r24
     96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x50f>
     96c:	3e c0       	rjmp	.+124    	; 0x9ea <__stack+0x58b>
				{
					if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	88 2f       	mov	r24, r24
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	9c 01       	movw	r18, r24
     97a:	22 0f       	add	r18, r18
     97c:	33 1f       	adc	r19, r19
     97e:	22 0f       	add	r18, r18
     980:	33 1f       	adc	r19, r19
     982:	82 0f       	add	r24, r18
     984:	93 1f       	adc	r25, r19
     986:	fc 01       	movw	r30, r24
     988:	e9 59       	subi	r30, 0x99	; 153
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	80 81       	ld	r24, Z
     98e:	86 30       	cpi	r24, 0x06	; 6
     990:	d0 f4       	brcc	.+52     	; 0x9c6 <__stack+0x567>
					{

						TCCR0 =	(TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     992:	a3 e5       	ldi	r26, 0x53	; 83
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e3 e5       	ldi	r30, 0x53	; 83
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	48 2f       	mov	r20, r24
     99e:	48 7f       	andi	r20, 0xF8	; 248
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	9c 01       	movw	r18, r24
     9ac:	22 0f       	add	r18, r18
     9ae:	33 1f       	adc	r19, r19
     9b0:	22 0f       	add	r18, r18
     9b2:	33 1f       	adc	r19, r19
     9b4:	82 0f       	add	r24, r18
     9b6:	93 1f       	adc	r25, r19
     9b8:	fc 01       	movw	r30, r24
     9ba:	e9 59       	subi	r30, 0x99	; 153
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	80 81       	ld	r24, Z
     9c0:	84 2b       	or	r24, r20
     9c2:	8c 93       	st	X, r24
     9c4:	fa c6       	rjmp	.+3572   	; 0x17ba <__stack+0x135b>
					}
					else
					{
						TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	88 2f       	mov	r24, r24
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	9c 01       	movw	r18, r24
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	22 0f       	add	r18, r18
     9d8:	33 1f       	adc	r19, r19
     9da:	82 0f       	add	r24, r18
     9dc:	93 1f       	adc	r25, r19
     9de:	fc 01       	movw	r30, r24
     9e0:	e7 59       	subi	r30, 0x97	; 151
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	10 82       	st	Z, r1
						retval = NOK;
     9e6:	1a 82       	std	Y+2, r1	; 0x02
     9e8:	e8 c6       	rjmp	.+3536   	; 0x17ba <__stack+0x135b>
					}
				}

				else if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == external)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	9c 01       	movw	r18, r24
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	82 0f       	add	r24, r18
     a00:	93 1f       	adc	r25, r19
     a02:	fc 01       	movw	r30, r24
     a04:	eb 59       	subi	r30, 0x9B	; 155
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	80 81       	ld	r24, Z
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x5b1>
     a0e:	8b c0       	rjmp	.+278    	; 0xb26 <__stack+0x6c7>
				{ DDRB &= ~(1<<PB1);
     a10:	a7 e3       	ldi	r26, 0x37	; 55
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e7 e3       	ldi	r30, 0x37	; 55
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	8d 7f       	andi	r24, 0xFD	; 253
     a1c:	8c 93       	st	X, r24
				if(TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_falling)
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	88 2f       	mov	r24, r24
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	9c 01       	movw	r18, r24
     a2a:	22 0f       	add	r18, r18
     a2c:	33 1f       	adc	r19, r19
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	82 0f       	add	r24, r18
     a34:	93 1f       	adc	r25, r19
     a36:	fc 01       	movw	r30, r24
     a38:	ea 59       	subi	r30, 0x9A	; 154
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	80 81       	ld	r24, Z
     a3e:	86 30       	cpi	r24, 0x06	; 6
     a40:	49 f4       	brne	.+18     	; 0xa54 <__stack+0x5f5>
				{
					TCCR0 = (TCCR0 & 0xF8) | EX_falling;
     a42:	a3 e5       	ldi	r26, 0x53	; 83
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e3 e5       	ldi	r30, 0x53	; 83
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	88 7f       	andi	r24, 0xF8	; 248
     a4e:	86 60       	ori	r24, 0x06	; 6
     a50:	8c 93       	st	X, r24
     a52:	2b c0       	rjmp	.+86     	; 0xaaa <__stack+0x64b>
				}

				else if (TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_rising)
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	9c 01       	movw	r18, r24
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	fc 01       	movw	r30, r24
     a6e:	ea 59       	subi	r30, 0x9A	; 154
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	80 81       	ld	r24, Z
     a74:	87 30       	cpi	r24, 0x07	; 7
     a76:	41 f4       	brne	.+16     	; 0xa88 <__stack+0x629>
				{
					TCCR0 = (TCCR0 & 0xF8) | EX_rising;
     a78:	a3 e5       	ldi	r26, 0x53	; 83
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e3 e5       	ldi	r30, 0x53	; 83
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	87 60       	ori	r24, 0x07	; 7
     a84:	8c 93       	st	X, r24
     a86:	11 c0       	rjmp	.+34     	; 0xaaa <__stack+0x64b>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	9c 01       	movw	r18, r24
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
     a98:	22 0f       	add	r18, r18
     a9a:	33 1f       	adc	r19, r19
     a9c:	82 0f       	add	r24, r18
     a9e:	93 1f       	adc	r25, r19
     aa0:	fc 01       	movw	r30, r24
     aa2:	e7 59       	subi	r30, 0x97	; 151
     aa4:	ff 4f       	sbci	r31, 0xFF	; 255
     aa6:	10 82       	st	Z, r1
					retval = NOK;
     aa8:	1a 82       	std	Y+2, r1	; 0x02
				}
				if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	9c 01       	movw	r18, r24
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	fc 01       	movw	r30, r24
     ac4:	e9 59       	subi	r30, 0x99	; 153
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	86 30       	cpi	r24, 0x06	; 6
     acc:	d0 f4       	brcc	.+52     	; 0xb02 <__stack+0x6a3>
				{
					TCCR0 = (TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     ace:	a3 e5       	ldi	r26, 0x53	; 83
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	e3 e5       	ldi	r30, 0x53	; 83
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	48 2f       	mov	r20, r24
     ada:	48 7f       	andi	r20, 0xF8	; 248
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	9c 01       	movw	r18, r24
     ae8:	22 0f       	add	r18, r18
     aea:	33 1f       	adc	r19, r19
     aec:	22 0f       	add	r18, r18
     aee:	33 1f       	adc	r19, r19
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	fc 01       	movw	r30, r24
     af6:	e9 59       	subi	r30, 0x99	; 153
     af8:	ff 4f       	sbci	r31, 0xFF	; 255
     afa:	80 81       	ld	r24, Z
     afc:	84 2b       	or	r24, r20
     afe:	8c 93       	st	X, r24
     b00:	5c c6       	rjmp	.+3256   	; 0x17ba <__stack+0x135b>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	88 2f       	mov	r24, r24
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	9c 01       	movw	r18, r24
     b0e:	22 0f       	add	r18, r18
     b10:	33 1f       	adc	r19, r19
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	fc 01       	movw	r30, r24
     b1c:	e7 59       	subi	r30, 0x97	; 151
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	10 82       	st	Z, r1
					retval = NOK;
     b22:	1a 82       	std	Y+2, r1	; 0x02
     b24:	4a c6       	rjmp	.+3220   	; 0x17ba <__stack+0x135b>
				}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	88 2f       	mov	r24, r24
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	9c 01       	movw	r18, r24
     b32:	22 0f       	add	r18, r18
     b34:	33 1f       	adc	r19, r19
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	fc 01       	movw	r30, r24
     b40:	e7 59       	subi	r30, 0x97	; 151
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	10 82       	st	Z, r1
					retval = NOK;
     b46:	1a 82       	std	Y+2, r1	; 0x02
     b48:	38 c6       	rjmp	.+3184   	; 0x17ba <__stack+0x135b>
				}
			}
			else if(TIMER_cnfg_arr[loop_index].MODE == PWM_PHASE &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	9c 01       	movw	r18, r24
     b56:	22 0f       	add	r18, r18
     b58:	33 1f       	adc	r19, r19
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19
     b62:	fc 01       	movw	r30, r24
     b64:	ef 59       	subi	r30, 0x9F	; 159
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	80 81       	ld	r24, Z
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__stack+0x711>
     b6e:	a7 c1       	rjmp	.+846    	; 0xebe <__stack+0xa5f>
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	9c 01       	movw	r18, r24
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	fc 01       	movw	r30, r24
     b8a:	ef 59       	subi	r30, 0x9F	; 159
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	80 81       	ld	r24, Z
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	08 f0       	brcs	.+2      	; 0xb96 <__stack+0x737>
     b94:	94 c1       	rjmp	.+808    	; 0xebe <__stack+0xa5f>
			{
				TCCR0 =(1<<WGM00) ;
     b96:	e3 e5       	ldi	r30, 0x53	; 83
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	80 83       	st	Z, r24
				TCCR0 &=~(1<<FOC0);/*FOCO BINS WILL BE ZERO */
     b9e:	a3 e5       	ldi	r26, 0x53	; 83
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e3 e5       	ldi	r30, 0x53	; 83
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8f 77       	andi	r24, 0x7F	; 127
     baa:	8c 93       	st	X, r24
				TCNT0 = 0;
     bac:	e2 e5       	ldi	r30, 0x52	; 82
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	10 82       	st	Z, r1
				/*SET THE MODE*/


				/*Set OUTPUT PIN for timer1 */
				if (TIMER_cnfg_arr[loop_index].OUTPUT_PINS==one_pin)
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	c9 01       	movw	r24, r18
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	fc 01       	movw	r30, r24
     bce:	e0 5a       	subi	r30, 0xA0	; 160
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	80 81       	ld	r24, Z
     bd4:	88 23       	and	r24, r24
     bd6:	09 f0       	breq	.+2      	; 0xbda <__stack+0x77b>
     bd8:	60 c0       	rjmp	.+192    	; 0xc9a <__stack+0x83b>
				{ DDRB  = DDRB | (1<<PB3);//set OC0 as output pin --> pin where the PWM signal is generated from MC
     bda:	a7 e3       	ldi	r26, 0x37	; 55
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e3       	ldi	r30, 0x37	; 55
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 60       	ori	r24, 0x08	; 8
     be6:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <MAX_COMPARE)
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	9c 01       	movw	r18, r24
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	82 0f       	add	r24, r18
     bfe:	93 1f       	adc	r25, r19
     c00:	fc 01       	movw	r30, r24
     c02:	ed 59       	subi	r30, 0x9D	; 157
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	80 81       	ld	r24, Z
     c08:	84 30       	cpi	r24, 0x04	; 4
     c0a:	a8 f5       	brcc	.+106    	; 0xc76 <__stack+0x817>
				{
					TCCR0=(TCCR0&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
     c0c:	a3 e5       	ldi	r26, 0x53	; 83
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e3 e5       	ldi	r30, 0x53	; 83
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	4f 7c       	andi	r20, 0xCF	; 207
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	9c 01       	movw	r18, r24
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	82 0f       	add	r24, r18
     c30:	93 1f       	adc	r25, r19
     c32:	fc 01       	movw	r30, r24
     c34:	ed 59       	subi	r30, 0x9D	; 157
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	82 95       	swap	r24
     c40:	92 95       	swap	r25
     c42:	90 7f       	andi	r25, 0xF0	; 240
     c44:	98 27       	eor	r25, r24
     c46:	80 7f       	andi	r24, 0xF0	; 240
     c48:	98 27       	eor	r25, r24
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
					if (TIMER_cnfg_arr[loop_index].O_C_R1 <=T_MAX )
					{ /*  Set the compare value IN  OCR0*/
						OCR0=TIMER_cnfg_arr[loop_index].O_C_R1; /*COMPARE VALUE IN OCR0*/
     c4e:	ac e5       	ldi	r26, 0x5C	; 92
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	9c 01       	movw	r18, r24
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	fc 01       	movw	r30, r24
     c6c:	ec 59       	subi	r30, 0x9C	; 156
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	80 81       	ld	r24, Z
     c72:	8c 93       	st	X, r24
     c74:	23 c0       	rjmp	.+70     	; 0xcbc <__stack+0x85d>
						retval = NOK;
					}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	9c 01       	movw	r18, r24
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	82 0f       	add	r24, r18
     c8c:	93 1f       	adc	r25, r19
     c8e:	fc 01       	movw	r30, r24
     c90:	e7 59       	subi	r30, 0x97	; 151
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	10 82       	st	Z, r1
					retval = NOK;
     c96:	1a 82       	std	Y+2, r1	; 0x02
     c98:	11 c0       	rjmp	.+34     	; 0xcbc <__stack+0x85d>
				}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	9c 01       	movw	r18, r24
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	82 0f       	add	r24, r18
     cb0:	93 1f       	adc	r25, r19
     cb2:	fc 01       	movw	r30, r24
     cb4:	e7 59       	subi	r30, 0x97	; 151
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	10 82       	st	Z, r1
					retval = NOK;
     cba:	1a 82       	std	Y+2, r1	; 0x02
				}

				if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	9c 01       	movw	r18, r24
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	82 0f       	add	r24, r18
     cd2:	93 1f       	adc	r25, r19
     cd4:	fc 01       	movw	r30, r24
     cd6:	eb 59       	subi	r30, 0x9B	; 155
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 81       	ld	r24, Z
     cdc:	88 23       	and	r24, r24
     cde:	09 f0       	breq	.+2      	; 0xce2 <__stack+0x883>
     ce0:	3e c0       	rjmp	.+124    	; 0xd5e <__stack+0x8ff>
				{
					if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	9c 01       	movw	r18, r24
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	82 0f       	add	r24, r18
     cf8:	93 1f       	adc	r25, r19
     cfa:	fc 01       	movw	r30, r24
     cfc:	e9 59       	subi	r30, 0x99	; 153
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	80 81       	ld	r24, Z
     d02:	86 30       	cpi	r24, 0x06	; 6
     d04:	d0 f4       	brcc	.+52     	; 0xd3a <__stack+0x8db>
					{

						TCCR0 =	(TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	48 7f       	andi	r20, 0xF8	; 248
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	9c 01       	movw	r18, r24
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	82 0f       	add	r24, r18
     d2a:	93 1f       	adc	r25, r19
     d2c:	fc 01       	movw	r30, r24
     d2e:	e9 59       	subi	r30, 0x99	; 153
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 81       	ld	r24, Z
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	40 c5       	rjmp	.+2688   	; 0x17ba <__stack+0x135b>
					}
					else
					{
						TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	9c 01       	movw	r18, r24
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
     d4e:	82 0f       	add	r24, r18
     d50:	93 1f       	adc	r25, r19
     d52:	fc 01       	movw	r30, r24
     d54:	e7 59       	subi	r30, 0x97	; 151
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	10 82       	st	Z, r1
						retval = NOK;
     d5a:	1a 82       	std	Y+2, r1	; 0x02
     d5c:	2e c5       	rjmp	.+2652   	; 0x17ba <__stack+0x135b>
					}
				}

				else if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == external)
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	9c 01       	movw	r18, r24
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	fc 01       	movw	r30, r24
     d78:	eb 59       	subi	r30, 0x9B	; 155
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	09 f0       	breq	.+2      	; 0xd84 <__stack+0x925>
     d82:	8b c0       	rjmp	.+278    	; 0xe9a <__stack+0xa3b>
				{ DDRB &= ~(1<<PB1);
     d84:	a7 e3       	ldi	r26, 0x37	; 55
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e7 e3       	ldi	r30, 0x37	; 55
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8d 7f       	andi	r24, 0xFD	; 253
     d90:	8c 93       	st	X, r24
				if(TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_falling)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	9c 01       	movw	r18, r24
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	fc 01       	movw	r30, r24
     dac:	ea 59       	subi	r30, 0x9A	; 154
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	80 81       	ld	r24, Z
     db2:	86 30       	cpi	r24, 0x06	; 6
     db4:	49 f4       	brne	.+18     	; 0xdc8 <__stack+0x969>
				{
					TCCR0 = (TCCR0 & 0xF8) | EX_falling;
     db6:	a3 e5       	ldi	r26, 0x53	; 83
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e3 e5       	ldi	r30, 0x53	; 83
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	88 7f       	andi	r24, 0xF8	; 248
     dc2:	86 60       	ori	r24, 0x06	; 6
     dc4:	8c 93       	st	X, r24
     dc6:	2b c0       	rjmp	.+86     	; 0xe1e <__stack+0x9bf>
				}

				else if (TIMER_cnfg_arr[loop_index].EXTERNAL_CLK_EDGE==EX_rising)
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	9c 01       	movw	r18, r24
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	82 0f       	add	r24, r18
     dde:	93 1f       	adc	r25, r19
     de0:	fc 01       	movw	r30, r24
     de2:	ea 59       	subi	r30, 0x9A	; 154
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	87 30       	cpi	r24, 0x07	; 7
     dea:	41 f4       	brne	.+16     	; 0xdfc <__stack+0x99d>
				{
					TCCR0 = (TCCR0 & 0xF8) | EX_rising;
     dec:	a3 e5       	ldi	r26, 0x53	; 83
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e3 e5       	ldi	r30, 0x53	; 83
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	87 60       	ori	r24, 0x07	; 7
     df8:	8c 93       	st	X, r24
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <__stack+0x9bf>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	9c 01       	movw	r18, r24
     e08:	22 0f       	add	r18, r18
     e0a:	33 1f       	adc	r19, r19
     e0c:	22 0f       	add	r18, r18
     e0e:	33 1f       	adc	r19, r19
     e10:	82 0f       	add	r24, r18
     e12:	93 1f       	adc	r25, r19
     e14:	fc 01       	movw	r30, r24
     e16:	e7 59       	subi	r30, 0x97	; 151
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	10 82       	st	Z, r1
					retval = NOK;
     e1c:	1a 82       	std	Y+2, r1	; 0x02
				}
				if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_CLK)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	9c 01       	movw	r18, r24
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	fc 01       	movw	r30, r24
     e38:	e9 59       	subi	r30, 0x99	; 153
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	80 81       	ld	r24, Z
     e3e:	86 30       	cpi	r24, 0x06	; 6
     e40:	d0 f4       	brcc	.+52     	; 0xe76 <__stack+0xa17>
				{
					TCCR0 = (TCCR0 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     e42:	a3 e5       	ldi	r26, 0x53	; 83
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e3 e5       	ldi	r30, 0x53	; 83
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	48 7f       	andi	r20, 0xF8	; 248
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	9c 01       	movw	r18, r24
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	fc 01       	movw	r30, r24
     e6a:	e9 59       	subi	r30, 0x99	; 153
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	80 81       	ld	r24, Z
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	a2 c4       	rjmp	.+2372   	; 0x17ba <__stack+0x135b>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	9c 01       	movw	r18, r24
     e82:	22 0f       	add	r18, r18
     e84:	33 1f       	adc	r19, r19
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	fc 01       	movw	r30, r24
     e90:	e7 59       	subi	r30, 0x97	; 151
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	10 82       	st	Z, r1
					retval = NOK;
     e96:	1a 82       	std	Y+2, r1	; 0x02
     e98:	90 c4       	rjmp	.+2336   	; 0x17ba <__stack+0x135b>
				}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	9c 01       	movw	r18, r24
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	fc 01       	movw	r30, r24
     eb4:	e7 59       	subi	r30, 0x97	; 151
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	10 82       	st	Z, r1
					retval = NOK;
     eba:	1a 82       	std	Y+2, r1	; 0x02
     ebc:	7e c4       	rjmp	.+2300   	; 0x17ba <__stack+0x135b>
				}
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	9c 01       	movw	r18, r24
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	22 0f       	add	r18, r18
     ed0:	33 1f       	adc	r19, r19
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	fc 01       	movw	r30, r24
     ed8:	e7 59       	subi	r30, 0x97	; 151
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	10 82       	st	Z, r1
				retval = NOK;
     ede:	1a 82       	std	Y+2, r1	; 0x02
     ee0:	6c c4       	rjmp	.+2264   	; 0x17ba <__stack+0x135b>



			break;
		case timer_2:
			if(TIMER_cnfg_arr[loop_index].MODE == NORMAL &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	9c 01       	movw	r18, r24
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	82 0f       	add	r24, r18
     ef8:	93 1f       	adc	r25, r19
     efa:	fc 01       	movw	r30, r24
     efc:	ef 59       	subi	r30, 0x9F	; 159
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	80 81       	ld	r24, Z
     f02:	88 23       	and	r24, r24
     f04:	09 f0       	breq	.+2      	; 0xf08 <__stack+0xaa9>
     f06:	e3 c0       	rjmp	.+454    	; 0x10ce <__stack+0xc6f>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	9c 01       	movw	r18, r24
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	82 0f       	add	r24, r18
     f1e:	93 1f       	adc	r25, r19
     f20:	fc 01       	movw	r30, r24
     f22:	ef 59       	subi	r30, 0x9F	; 159
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <__stack+0xacf>
     f2c:	d0 c0       	rjmp	.+416    	; 0x10ce <__stack+0xc6f>
			{
				TCCR2 = (1<<FOC2) ;
     f2e:	e5 e4       	ldi	r30, 0x45	; 69
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	80 83       	st	Z, r24
				TCNT2 = 0;
     f36:	e4 e4       	ldi	r30, 0x44	; 68
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	10 82       	st	Z, r1
				TCCR2=(TCCR2&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
     f3c:	a5 e4       	ldi	r26, 0x45	; 69
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e4       	ldi	r30, 0x45	; 69
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	4f 7c       	andi	r20, 0xCF	; 207
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	9c 01       	movw	r18, r24
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	fc 01       	movw	r30, r24
     f64:	ed 59       	subi	r30, 0x9D	; 157
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	82 95       	swap	r24
     f70:	92 95       	swap	r25
     f72:	90 7f       	andi	r25, 0xF0	; 240
     f74:	98 27       	eor	r25, r24
     f76:	80 7f       	andi	r24, 0xF0	; 240
     f78:	98 27       	eor	r25, r24
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	9c 01       	movw	r18, r24
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	fc 01       	movw	r30, r24
     f98:	eb 59       	subi	r30, 0x9B	; 155
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__stack+0xb45>
     fa2:	3e c0       	rjmp	.+124    	; 0x1020 <__stack+0xbc1>
				{
					if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_T2_CLK)
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	9c 01       	movw	r18, r24
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	22 0f       	add	r18, r18
     fb6:	33 1f       	adc	r19, r19
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	fc 01       	movw	r30, r24
     fbe:	e9 59       	subi	r30, 0x99	; 153
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	88 30       	cpi	r24, 0x08	; 8
     fc6:	d0 f4       	brcc	.+52     	; 0xffc <__stack+0xb9d>
					{

						TCCR2 =	(TCCR2 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
     fc8:	a5 e4       	ldi	r26, 0x45	; 69
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e4       	ldi	r30, 0x45	; 69
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	48 7f       	andi	r20, 0xF8	; 248
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	9c 01       	movw	r18, r24
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	22 0f       	add	r18, r18
     fe8:	33 1f       	adc	r19, r19
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	fc 01       	movw	r30, r24
     ff0:	e9 59       	subi	r30, 0x99	; 153
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	80 81       	ld	r24, Z
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	23 c0       	rjmp	.+70     	; 0x1042 <__stack+0xbe3>
					}
					else
					{
						TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	9c 01       	movw	r18, r24
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	fc 01       	movw	r30, r24
    1016:	e7 59       	subi	r30, 0x97	; 151
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	10 82       	st	Z, r1
						retval = NOK;
    101c:	1a 82       	std	Y+2, r1	; 0x02
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <__stack+0xbe3>
					}
				}

				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	9c 01       	movw	r18, r24
    102c:	22 0f       	add	r18, r18
    102e:	33 1f       	adc	r19, r19
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	82 0f       	add	r24, r18
    1036:	93 1f       	adc	r25, r19
    1038:	fc 01       	movw	r30, r24
    103a:	e7 59       	subi	r30, 0x97	; 151
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	10 82       	st	Z, r1
					retval = NOK;
    1040:	1a 82       	std	Y+2, r1	; 0x02
				}
				if(TIMER_cnfg_arr[loop_index].INTERUPT == int_active)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	9c 01       	movw	r18, r24
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	82 0f       	add	r24, r18
    1058:	93 1f       	adc	r25, r19
    105a:	fc 01       	movw	r30, r24
    105c:	e8 59       	subi	r30, 0x98	; 152
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	80 81       	ld	r24, Z
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	41 f4       	brne	.+16     	; 0x1076 <__stack+0xc17>
				{
					TIMSK |= (1<<TOIE2);
    1066:	a9 e5       	ldi	r26, 0x59	; 89
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e9 e5       	ldi	r30, 0x59	; 89
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 64       	ori	r24, 0x40	; 64
    1072:	8c 93       	st	X, r24
    1074:	a2 c3       	rjmp	.+1860   	; 0x17ba <__stack+0x135b>
				}
				else if(TIMER_cnfg_arr[loop_index].INTERUPT == int_not_active)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	9c 01       	movw	r18, r24
    1082:	22 0f       	add	r18, r18
    1084:	33 1f       	adc	r19, r19
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	fc 01       	movw	r30, r24
    1090:	e8 59       	subi	r30, 0x98	; 152
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 81       	ld	r24, Z
    1096:	88 23       	and	r24, r24
    1098:	41 f4       	brne	.+16     	; 0x10aa <__stack+0xc4b>
				{
					TIMSK &=~ (1<<TOIE2);
    109a:	a9 e5       	ldi	r26, 0x59	; 89
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e9 e5       	ldi	r30, 0x59	; 89
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 7b       	andi	r24, 0xBF	; 191
    10a6:	8c 93       	st	X, r24
    10a8:	88 c3       	rjmp	.+1808   	; 0x17ba <__stack+0x135b>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	9c 01       	movw	r18, r24
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	fc 01       	movw	r30, r24
    10c4:	e7 59       	subi	r30, 0x97	; 151
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	10 82       	st	Z, r1
					retval = NOK;
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    10cc:	76 c3       	rjmp	.+1772   	; 0x17ba <__stack+0x135b>
				}
			}
			else if(TIMER_cnfg_arr[loop_index].MODE == CTC &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	9c 01       	movw	r18, r24
    10da:	22 0f       	add	r18, r18
    10dc:	33 1f       	adc	r19, r19
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	fc 01       	movw	r30, r24
    10e8:	ef 59       	subi	r30, 0x9F	; 159
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	80 81       	ld	r24, Z
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <__stack+0xc95>
    10f2:	1a c1       	rjmp	.+564    	; 0x1328 <__stack+0xec9>
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	9c 01       	movw	r18, r24
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	fc 01       	movw	r30, r24
    110e:	ef 59       	subi	r30, 0x9F	; 159
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	80 81       	ld	r24, Z
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	08 f0       	brcs	.+2      	; 0x111a <__stack+0xcbb>
    1118:	07 c1       	rjmp	.+526    	; 0x1328 <__stack+0xec9>
			{TCNT2 = 0;
    111a:	e4 e4       	ldi	r30, 0x44	; 68
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	10 82       	st	Z, r1
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    1120:	e5 e4       	ldi	r30, 0x45	; 69
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	88 e8       	ldi	r24, 0x88	; 136
    1126:	80 83       	st	Z, r24
			if (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <MAX_COMPARE)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	9c 01       	movw	r18, r24
    1134:	22 0f       	add	r18, r18
    1136:	33 1f       	adc	r19, r19
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	fc 01       	movw	r30, r24
    1142:	ed 59       	subi	r30, 0x9D	; 157
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	a8 f5       	brcc	.+106    	; 0x11b6 <__stack+0xd57>
			{
				TCCR2=(TCCR2&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
    114c:	a5 e4       	ldi	r26, 0x45	; 69
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e5 e4       	ldi	r30, 0x45	; 69
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	4f 7c       	andi	r20, 0xCF	; 207
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	9c 01       	movw	r18, r24
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	fc 01       	movw	r30, r24
    1174:	ed 59       	subi	r30, 0x9D	; 157
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 81       	ld	r24, Z
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	82 95       	swap	r24
    1180:	92 95       	swap	r25
    1182:	90 7f       	andi	r25, 0xF0	; 240
    1184:	98 27       	eor	r25, r24
    1186:	80 7f       	andi	r24, 0xF0	; 240
    1188:	98 27       	eor	r25, r24
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].O_C_R1 < T_MAX )
				{
					OCR2=TIMER_cnfg_arr[loop_index].O_C_R1;
    118e:	a3 e4       	ldi	r26, 0x43	; 67
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	9c 01       	movw	r18, r24
    119e:	22 0f       	add	r18, r18
    11a0:	33 1f       	adc	r19, r19
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	82 0f       	add	r24, r18
    11a8:	93 1f       	adc	r25, r19
    11aa:	fc 01       	movw	r30, r24
    11ac:	ec 59       	subi	r30, 0x9C	; 156
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	8c 93       	st	X, r24
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <__stack+0xd79>
					retval = NOK;
				}
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	9c 01       	movw	r18, r24
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	fc 01       	movw	r30, r24
    11d0:	e7 59       	subi	r30, 0x97	; 151
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	10 82       	st	Z, r1
				retval = NOK;
    11d6:	1a 82       	std	Y+2, r1	; 0x02
			}
			if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	9c 01       	movw	r18, r24
    11e4:	22 0f       	add	r18, r18
    11e6:	33 1f       	adc	r19, r19
    11e8:	22 0f       	add	r18, r18
    11ea:	33 1f       	adc	r19, r19
    11ec:	82 0f       	add	r24, r18
    11ee:	93 1f       	adc	r25, r19
    11f0:	fc 01       	movw	r30, r24
    11f2:	eb 59       	subi	r30, 0x9B	; 155
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__stack+0xd9f>
    11fc:	3e c0       	rjmp	.+124    	; 0x127a <__stack+0xe1b>
			{
				if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_T2_CLK)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	9c 01       	movw	r18, r24
    120a:	22 0f       	add	r18, r18
    120c:	33 1f       	adc	r19, r19
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	82 0f       	add	r24, r18
    1214:	93 1f       	adc	r25, r19
    1216:	fc 01       	movw	r30, r24
    1218:	e9 59       	subi	r30, 0x99	; 153
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	88 30       	cpi	r24, 0x08	; 8
    1220:	d0 f4       	brcc	.+52     	; 0x1256 <__stack+0xdf7>
				{

					TCCR2 =	(TCCR2 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
    1222:	a5 e4       	ldi	r26, 0x45	; 69
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e4       	ldi	r30, 0x45	; 69
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	48 7f       	andi	r20, 0xF8	; 248
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	9c 01       	movw	r18, r24
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	fc 01       	movw	r30, r24
    124a:	e9 59       	subi	r30, 0x99	; 153
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	23 c0       	rjmp	.+70     	; 0x129c <__stack+0xe3d>
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	9c 01       	movw	r18, r24
    1262:	22 0f       	add	r18, r18
    1264:	33 1f       	adc	r19, r19
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	fc 01       	movw	r30, r24
    1270:	e7 59       	subi	r30, 0x97	; 151
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	10 82       	st	Z, r1
					retval = NOK;
    1276:	1a 82       	std	Y+2, r1	; 0x02
    1278:	11 c0       	rjmp	.+34     	; 0x129c <__stack+0xe3d>
			}


			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	9c 01       	movw	r18, r24
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	fc 01       	movw	r30, r24
    1294:	e7 59       	subi	r30, 0x97	; 151
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	10 82       	st	Z, r1
				retval = NOK;
    129a:	1a 82       	std	Y+2, r1	; 0x02
			}
			if(TIMER_cnfg_arr[loop_index].INTERUPT == int_active)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	9c 01       	movw	r18, r24
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	82 0f       	add	r24, r18
    12b2:	93 1f       	adc	r25, r19
    12b4:	fc 01       	movw	r30, r24
    12b6:	e8 59       	subi	r30, 0x98	; 152
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	41 f4       	brne	.+16     	; 0x12d0 <__stack+0xe71>
			{
				TIMSK |= (1<<OCIE2);
    12c0:	a9 e5       	ldi	r26, 0x59	; 89
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e9 e5       	ldi	r30, 0x59	; 89
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	8c 93       	st	X, r24
    12ce:	75 c2       	rjmp	.+1258   	; 0x17ba <__stack+0x135b>
			}
			else if(TIMER_cnfg_arr[loop_index].INTERUPT == int_not_active)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	9c 01       	movw	r18, r24
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	82 0f       	add	r24, r18
    12e6:	93 1f       	adc	r25, r19
    12e8:	fc 01       	movw	r30, r24
    12ea:	e8 59       	subi	r30, 0x98	; 152
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	80 81       	ld	r24, Z
    12f0:	88 23       	and	r24, r24
    12f2:	41 f4       	brne	.+16     	; 0x1304 <__stack+0xea5>
			{
				TIMSK &=~ (1<<OCIE2);
    12f4:	a9 e5       	ldi	r26, 0x59	; 89
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e9 e5       	ldi	r30, 0x59	; 89
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8f 77       	andi	r24, 0x7F	; 127
    1300:	8c 93       	st	X, r24
    1302:	5b c2       	rjmp	.+1206   	; 0x17ba <__stack+0x135b>
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	9c 01       	movw	r18, r24
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	82 0f       	add	r24, r18
    131a:	93 1f       	adc	r25, r19
    131c:	fc 01       	movw	r30, r24
    131e:	e7 59       	subi	r30, 0x97	; 151
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	10 82       	st	Z, r1
				retval = NOK;
    1324:	1a 82       	std	Y+2, r1	; 0x02
    1326:	49 c2       	rjmp	.+1170   	; 0x17ba <__stack+0x135b>
			}

			}
			else if(TIMER_cnfg_arr[loop_index].MODE == FAST_PWM &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	9c 01       	movw	r18, r24
    1334:	22 0f       	add	r18, r18
    1336:	33 1f       	adc	r19, r19
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	82 0f       	add	r24, r18
    133e:	93 1f       	adc	r25, r19
    1340:	fc 01       	movw	r30, r24
    1342:	ef 59       	subi	r30, 0x9F	; 159
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	80 81       	ld	r24, Z
    1348:	83 30       	cpi	r24, 0x03	; 3
    134a:	09 f0       	breq	.+2      	; 0x134e <__stack+0xeef>
    134c:	09 c1       	rjmp	.+530    	; 0x1560 <__stack+0x1101>
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	9c 01       	movw	r18, r24
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	22 0f       	add	r18, r18
    1360:	33 1f       	adc	r19, r19
    1362:	82 0f       	add	r24, r18
    1364:	93 1f       	adc	r25, r19
    1366:	fc 01       	movw	r30, r24
    1368:	ef 59       	subi	r30, 0x9F	; 159
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	80 81       	ld	r24, Z
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	08 f0       	brcs	.+2      	; 0x1374 <__stack+0xf15>
    1372:	f6 c0       	rjmp	.+492    	; 0x1560 <__stack+0x1101>
			{
				TCCR2 =(1<<WGM20) | (1<<WGM21);
    1374:	e5 e4       	ldi	r30, 0x45	; 69
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	88 e4       	ldi	r24, 0x48	; 72
    137a:	80 83       	st	Z, r24
				TCCR2 &=~(1<<FOC2);/*FOCO BINS WILL BE ZERO */
    137c:	a5 e4       	ldi	r26, 0x45	; 69
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e4       	ldi	r30, 0x45	; 69
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	8f 77       	andi	r24, 0x7F	; 127
    1388:	8c 93       	st	X, r24
				TCNT2 = 0;
    138a:	e4 e4       	ldi	r30, 0x44	; 68
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	10 82       	st	Z, r1
				/*SET THE MODE*/


				/*Set OUTPUT PIN for timer1 */
				if (TIMER_cnfg_arr[loop_index].OUTPUT_PINS==one_pin)
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	c9 01       	movw	r24, r18
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	fc 01       	movw	r30, r24
    13ac:	e0 5a       	subi	r30, 0xA0	; 160
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 81       	ld	r24, Z
    13b2:	88 23       	and	r24, r24
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <__stack+0xf59>
    13b6:	60 c0       	rjmp	.+192    	; 0x1478 <__stack+0x1019>
				{ DDRB  = DDRD | (1<<PB7);//set OC0 as output pin --> pin where the PWM signal is generated from MC
    13b8:	a7 e3       	ldi	r26, 0x37	; 55
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e1 e3       	ldi	r30, 0x31	; 49
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 68       	ori	r24, 0x80	; 128
    13c4:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <MAX_COMPARE)
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	9c 01       	movw	r18, r24
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	fc 01       	movw	r30, r24
    13e0:	ed 59       	subi	r30, 0x9D	; 157
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 81       	ld	r24, Z
    13e6:	84 30       	cpi	r24, 0x04	; 4
    13e8:	a8 f5       	brcc	.+106    	; 0x1454 <__stack+0xff5>
				{
					TCCR2=(TCCR2&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
    13ea:	a5 e4       	ldi	r26, 0x45	; 69
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e4       	ldi	r30, 0x45	; 69
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	4f 7c       	andi	r20, 0xCF	; 207
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	9c 01       	movw	r18, r24
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	82 0f       	add	r24, r18
    140e:	93 1f       	adc	r25, r19
    1410:	fc 01       	movw	r30, r24
    1412:	ed 59       	subi	r30, 0x9D	; 157
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 81       	ld	r24, Z
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	82 95       	swap	r24
    141e:	92 95       	swap	r25
    1420:	90 7f       	andi	r25, 0xF0	; 240
    1422:	98 27       	eor	r25, r24
    1424:	80 7f       	andi	r24, 0xF0	; 240
    1426:	98 27       	eor	r25, r24
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
					if (TIMER_cnfg_arr[loop_index].O_C_R1 <=T_MAX )
					{ /*  Set the compare value IN  OCR0*/
						OCR2=TIMER_cnfg_arr[loop_index].O_C_R1; /*COMPARE VALUE IN OCR0*/
    142c:	a3 e4       	ldi	r26, 0x43	; 67
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	9c 01       	movw	r18, r24
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	fc 01       	movw	r30, r24
    144a:	ec 59       	subi	r30, 0x9C	; 156
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	80 81       	ld	r24, Z
    1450:	8c 93       	st	X, r24
    1452:	23 c0       	rjmp	.+70     	; 0x149a <__stack+0x103b>
						retval = NOK;
					}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	9c 01       	movw	r18, r24
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	fc 01       	movw	r30, r24
    146e:	e7 59       	subi	r30, 0x97	; 151
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	10 82       	st	Z, r1
					retval = NOK;
    1474:	1a 82       	std	Y+2, r1	; 0x02
    1476:	11 c0       	rjmp	.+34     	; 0x149a <__stack+0x103b>
				}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	9c 01       	movw	r18, r24
    1484:	22 0f       	add	r18, r18
    1486:	33 1f       	adc	r19, r19
    1488:	22 0f       	add	r18, r18
    148a:	33 1f       	adc	r19, r19
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	fc 01       	movw	r30, r24
    1492:	e7 59       	subi	r30, 0x97	; 151
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	10 82       	st	Z, r1
					retval = NOK;
    1498:	1a 82       	std	Y+2, r1	; 0x02
				}

				if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	9c 01       	movw	r18, r24
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	fc 01       	movw	r30, r24
    14b4:	eb 59       	subi	r30, 0x9B	; 155
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 81       	ld	r24, Z
    14ba:	88 23       	and	r24, r24
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <__stack+0x1061>
    14be:	3e c0       	rjmp	.+124    	; 0x153c <__stack+0x10dd>
				{
					if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_T2_CLK)
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	9c 01       	movw	r18, r24
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	fc 01       	movw	r30, r24
    14da:	e9 59       	subi	r30, 0x99	; 153
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	88 30       	cpi	r24, 0x08	; 8
    14e2:	d0 f4       	brcc	.+52     	; 0x1518 <__stack+0x10b9>
					{

						TCCR2 =	(TCCR2 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
    14e4:	a5 e4       	ldi	r26, 0x45	; 69
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e4       	ldi	r30, 0x45	; 69
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	48 7f       	andi	r20, 0xF8	; 248
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	9c 01       	movw	r18, r24
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	22 0f       	add	r18, r18
    1504:	33 1f       	adc	r19, r19
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	fc 01       	movw	r30, r24
    150c:	e9 59       	subi	r30, 0x99	; 153
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	84 2b       	or	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	51 c1       	rjmp	.+674    	; 0x17ba <__stack+0x135b>
					}
					else
					{
						TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	9c 01       	movw	r18, r24
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	82 0f       	add	r24, r18
    152e:	93 1f       	adc	r25, r19
    1530:	fc 01       	movw	r30, r24
    1532:	e7 59       	subi	r30, 0x97	; 151
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	10 82       	st	Z, r1
						retval = NOK;
    1538:	1a 82       	std	Y+2, r1	; 0x02
    153a:	3f c1       	rjmp	.+638    	; 0x17ba <__stack+0x135b>
					}
				}

				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	9c 01       	movw	r18, r24
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	22 0f       	add	r18, r18
    154e:	33 1f       	adc	r19, r19
    1550:	82 0f       	add	r24, r18
    1552:	93 1f       	adc	r25, r19
    1554:	fc 01       	movw	r30, r24
    1556:	e7 59       	subi	r30, 0x97	; 151
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	10 82       	st	Z, r1
					retval = NOK;
    155c:	1a 82       	std	Y+2, r1	; 0x02
    155e:	2d c1       	rjmp	.+602    	; 0x17ba <__stack+0x135b>
				}
			}
			else if(TIMER_cnfg_arr[loop_index].MODE == PWM_PHASE &&TIMER_cnfg_arr[loop_index].MODE<MAX_T0_MODES )
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	9c 01       	movw	r18, r24
    156c:	22 0f       	add	r18, r18
    156e:	33 1f       	adc	r19, r19
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	fc 01       	movw	r30, r24
    157a:	ef 59       	subi	r30, 0x9F	; 159
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	09 f0       	breq	.+2      	; 0x1586 <__stack+0x1127>
    1584:	09 c1       	rjmp	.+530    	; 0x1798 <__stack+0x1339>
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	9c 01       	movw	r18, r24
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	82 0f       	add	r24, r18
    159c:	93 1f       	adc	r25, r19
    159e:	fc 01       	movw	r30, r24
    15a0:	ef 59       	subi	r30, 0x9F	; 159
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 81       	ld	r24, Z
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <__stack+0x114d>
    15aa:	f6 c0       	rjmp	.+492    	; 0x1798 <__stack+0x1339>
			{
				TCCR2 =(1<<WGM20) ;
    15ac:	e5 e4       	ldi	r30, 0x45	; 69
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 e4       	ldi	r24, 0x40	; 64
    15b2:	80 83       	st	Z, r24
				TCCR2 &=~(1<<FOC2);/*FOCO BINS WILL BE ZERO */
    15b4:	a5 e4       	ldi	r26, 0x45	; 69
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e4       	ldi	r30, 0x45	; 69
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 77       	andi	r24, 0x7F	; 127
    15c0:	8c 93       	st	X, r24
				TCNT2 = 0;
    15c2:	e4 e4       	ldi	r30, 0x44	; 68
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	10 82       	st	Z, r1
				/*SET THE MODE*/


				/*Set OUTPUT PIN for timer1 */
				if (TIMER_cnfg_arr[loop_index].OUTPUT_PINS==one_pin)
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	c9 01       	movw	r24, r18
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	82 0f       	add	r24, r18
    15da:	93 1f       	adc	r25, r19
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	fc 01       	movw	r30, r24
    15e4:	e0 5a       	subi	r30, 0xA0	; 160
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	80 81       	ld	r24, Z
    15ea:	88 23       	and	r24, r24
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__stack+0x1191>
    15ee:	60 c0       	rjmp	.+192    	; 0x16b0 <__stack+0x1251>
				{ DDRD  = DDRD | (1<<PD7);//set OC0 as output pin --> pin where the PWM signal is generated from MC
    15f0:	a1 e3       	ldi	r26, 0x31	; 49
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 68       	ori	r24, 0x80	; 128
    15fc:	8c 93       	st	X, r24
				if (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <MAX_COMPARE)
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	9c 01       	movw	r18, r24
    160a:	22 0f       	add	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	82 0f       	add	r24, r18
    1614:	93 1f       	adc	r25, r19
    1616:	fc 01       	movw	r30, r24
    1618:	ed 59       	subi	r30, 0x9D	; 157
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 81       	ld	r24, Z
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	a8 f5       	brcc	.+106    	; 0x168c <__stack+0x122d>
				{
					TCCR2=(TCCR2&0XCF)| (TIMER_cnfg_arr[loop_index].COMPARE_COND1 <<4);
    1622:	a5 e4       	ldi	r26, 0x45	; 69
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e4       	ldi	r30, 0x45	; 69
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	4f 7c       	andi	r20, 0xCF	; 207
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	9c 01       	movw	r18, r24
    163c:	22 0f       	add	r18, r18
    163e:	33 1f       	adc	r19, r19
    1640:	22 0f       	add	r18, r18
    1642:	33 1f       	adc	r19, r19
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	fc 01       	movw	r30, r24
    164a:	ed 59       	subi	r30, 0x9D	; 157
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	80 81       	ld	r24, Z
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	82 95       	swap	r24
    1656:	92 95       	swap	r25
    1658:	90 7f       	andi	r25, 0xF0	; 240
    165a:	98 27       	eor	r25, r24
    165c:	80 7f       	andi	r24, 0xF0	; 240
    165e:	98 27       	eor	r25, r24
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
					if (TIMER_cnfg_arr[loop_index].O_C_R1 <=T_MAX )
					{ /*  Set the compare value IN  OCR0*/
						OCR2=TIMER_cnfg_arr[loop_index].O_C_R1; /*COMPARE VALUE IN OCR0*/
    1664:	a3 e4       	ldi	r26, 0x43	; 67
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	88 2f       	mov	r24, r24
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	9c 01       	movw	r18, r24
    1674:	22 0f       	add	r18, r18
    1676:	33 1f       	adc	r19, r19
    1678:	22 0f       	add	r18, r18
    167a:	33 1f       	adc	r19, r19
    167c:	82 0f       	add	r24, r18
    167e:	93 1f       	adc	r25, r19
    1680:	fc 01       	movw	r30, r24
    1682:	ec 59       	subi	r30, 0x9C	; 156
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	80 81       	ld	r24, Z
    1688:	8c 93       	st	X, r24
    168a:	23 c0       	rjmp	.+70     	; 0x16d2 <__stack+0x1273>
						retval = NOK;
					}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	9c 01       	movw	r18, r24
    1698:	22 0f       	add	r18, r18
    169a:	33 1f       	adc	r19, r19
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	82 0f       	add	r24, r18
    16a2:	93 1f       	adc	r25, r19
    16a4:	fc 01       	movw	r30, r24
    16a6:	e7 59       	subi	r30, 0x97	; 151
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	10 82       	st	Z, r1
					retval = NOK;
    16ac:	1a 82       	std	Y+2, r1	; 0x02
    16ae:	11 c0       	rjmp	.+34     	; 0x16d2 <__stack+0x1273>
				}
				}
				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	9c 01       	movw	r18, r24
    16bc:	22 0f       	add	r18, r18
    16be:	33 1f       	adc	r19, r19
    16c0:	22 0f       	add	r18, r18
    16c2:	33 1f       	adc	r19, r19
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	fc 01       	movw	r30, r24
    16ca:	e7 59       	subi	r30, 0x97	; 151
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	10 82       	st	Z, r1
					retval = NOK;
    16d0:	1a 82       	std	Y+2, r1	; 0x02
				}

				if (TIMER_cnfg_arr[loop_index].CLK_SOURCE == internal)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	9c 01       	movw	r18, r24
    16de:	22 0f       	add	r18, r18
    16e0:	33 1f       	adc	r19, r19
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	82 0f       	add	r24, r18
    16e8:	93 1f       	adc	r25, r19
    16ea:	fc 01       	movw	r30, r24
    16ec:	eb 59       	subi	r30, 0x9B	; 155
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	88 23       	and	r24, r24
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <__stack+0x1299>
    16f6:	3e c0       	rjmp	.+124    	; 0x1774 <__stack+0x1315>
				{
					if(TIMER_cnfg_arr[loop_index].PRESCALER<MAX_T2_CLK)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	9c 01       	movw	r18, r24
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	82 0f       	add	r24, r18
    170e:	93 1f       	adc	r25, r19
    1710:	fc 01       	movw	r30, r24
    1712:	e9 59       	subi	r30, 0x99	; 153
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	d0 f4       	brcc	.+52     	; 0x1750 <__stack+0x12f1>
					{

						TCCR2 =	(TCCR2 & 0xF8) | TIMER_cnfg_arr[loop_index].PRESCALER;
    171c:	a5 e4       	ldi	r26, 0x45	; 69
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e5 e4       	ldi	r30, 0x45	; 69
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	48 7f       	andi	r20, 0xF8	; 248
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	9c 01       	movw	r18, r24
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	22 0f       	add	r18, r18
    173c:	33 1f       	adc	r19, r19
    173e:	82 0f       	add	r24, r18
    1740:	93 1f       	adc	r25, r19
    1742:	fc 01       	movw	r30, r24
    1744:	e9 59       	subi	r30, 0x99	; 153
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	84 2b       	or	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	35 c0       	rjmp	.+106    	; 0x17ba <__stack+0x135b>
					}
					else
					{
						TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	9c 01       	movw	r18, r24
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	82 0f       	add	r24, r18
    1766:	93 1f       	adc	r25, r19
    1768:	fc 01       	movw	r30, r24
    176a:	e7 59       	subi	r30, 0x97	; 151
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	10 82       	st	Z, r1
						retval = NOK;
    1770:	1a 82       	std	Y+2, r1	; 0x02
    1772:	23 c0       	rjmp	.+70     	; 0x17ba <__stack+0x135b>
					}
				}

				else
				{
					TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	9c 01       	movw	r18, r24
    1780:	22 0f       	add	r18, r18
    1782:	33 1f       	adc	r19, r19
    1784:	22 0f       	add	r18, r18
    1786:	33 1f       	adc	r19, r19
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	fc 01       	movw	r30, r24
    178e:	e7 59       	subi	r30, 0x97	; 151
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	10 82       	st	Z, r1
					retval = NOK;
    1794:	1a 82       	std	Y+2, r1	; 0x02
    1796:	11 c0       	rjmp	.+34     	; 0x17ba <__stack+0x135b>
				}
			}
			else
			{
				TIMER_cnfg_arr[loop_index].IS_init_arr = NOT_INITIALIZED;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	9c 01       	movw	r18, r24
    17a4:	22 0f       	add	r18, r18
    17a6:	33 1f       	adc	r19, r19
    17a8:	22 0f       	add	r18, r18
    17aa:	33 1f       	adc	r19, r19
    17ac:	82 0f       	add	r24, r18
    17ae:	93 1f       	adc	r25, r19
    17b0:	fc 01       	movw	r30, r24
    17b2:	e7 59       	subi	r30, 0x97	; 151
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	10 82       	st	Z, r1
				retval = NOK;
    17b8:	1a 82       	std	Y+2, r1	; 0x02
Std_Func_t TIMER_init (void)
{
	Std_Func_t retval = OK;
	UINT8 loop_index = 0;

	for(loop_index = 0;loop_index<NUM_OF_TIMERS;loop_index++)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	10 f4       	brcc	.+4      	; 0x17ca <__stack+0x136b>
    17c6:	0c 94 55 00 	jmp	0xaa	; 0xaa <TIMER_init+0x18>

	}



	return retval;
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <__vector_9>:

unsigned char g_tick = 0;


ISR(TIMER0_OVF_vect)
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
    17e8:	af 93       	push	r26
    17ea:	bf 93       	push	r27
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    17f8:	80 91 7e 00 	lds	r24, 0x007E
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 7e 00 	sts	0x007E, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_HALF_SECOND)
    1802:	80 91 7e 00 	lds	r24, 0x007E
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	51 f4       	brne	.+20     	; 0x181e <__vector_9+0x44>
	{
		PORTC = PORTC ^ (1<<PC0); //toggle led every 0.5 second
    180a:	a5 e3       	ldi	r26, 0x35	; 53
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	90 81       	ld	r25, Z
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	89 27       	eor	r24, r25
    1818:	8c 93       	st	X, r24
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
    181a:	10 92 7e 00 	sts	0x007E, r1
	}
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	ff 91       	pop	r31
    1824:	ef 91       	pop	r30
    1826:	bf 91       	pop	r27
    1828:	af 91       	pop	r26
    182a:	9f 91       	pop	r25
    182c:	8f 91       	pop	r24
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <main>:
 * so we need timer to overflow 2 times to get a 0.5 second
 */


int main(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	DDRC  |= (1<<PC0); //configure the led pin to be output pin.
    1840:	a4 e3       	ldi	r26, 0x34	; 52
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e4 e3       	ldi	r30, 0x34	; 52
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC0);
    184e:	a5 e3       	ldi	r26, 0x35	; 53
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e5 e3       	ldi	r30, 0x35	; 53
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8e 7f       	andi	r24, 0xFE	; 254
    185a:	8c 93       	st	X, r24
	//LED is off at the beginning(Positive Logic).
	SREG  |= (1<<7); //enable global interrupts in MC by setting the I-Bit.
    185c:	af e5       	ldi	r26, 0x5F	; 95
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ef e5       	ldi	r30, 0x5F	; 95
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	8c 93       	st	X, r24
	 //start the timer.
	//timer0_init_normal_mode();
	TIMER_init();
    186a:	0e 94 49 00 	call	0x92	; 0x92 <TIMER_init>
    186e:	ff cf       	rjmp	.-2      	; 0x186e <main+0x36>

00001870 <_exit>:
    1870:	f8 94       	cli

00001872 <__stop_program>:
    1872:	ff cf       	rjmp	.-2      	; 0x1872 <__stop_program>
